# lets-encrypt-nginx example config file. This contains every possible key, and
# just sets them all to defaults.
# 

# If this is left unset, it must be given on the command-line using --sites
sites_list = './sites.conf.example'

# The directory certs are written to
certs_dir = '/etc/letsencrypt/certs/'

# Nginx
#######

# Skip all nginx config. This has no 'disable' value, so must just be commented
# out for nginx to be configured.
#nginx_skip = 1

# Inserted between 'listen' and 'ssl' in the nginx config so can be a port or 
# ip:port combination:
nginx_ssl_socket = 443

# Not-used if --no-cleartext is passed. In that case, nginx doesn't listen for 
# cleartext anywhere.
nginx_cleartext_socket = 80

# Don't have nginx listen on nginx_cleartex_socket, whatever it is set to:
nginx_nocleartext

# Config files are written in nginx-config-dir, and 'enabled' by running 
# nginx-enable-site with the config filename as its only argument. 
# You could write to sites-enabled and use --no-run-nginx to simplify this.
nginx_config_dir = /etc/nginx/sites-available/
nginx_enable_site = nginx-ensite

# Overwrite any existing nginx config. Comment-out to disable, 
# there is no 'disable' value here. Can be set on the command-line with 
# --clobber-nginx (or --clobber-both)
# Leaving this unset means new config will always be written, and 
# previously-considered sites can be safely processed, without undoing any
# customisation.
#nginx_clobber =  on

# Include the contents of this file in the nginx config file, verbatim in the 
# server{} context. Should probably be tab-indented for prettiness-sake
nginx_include_file  =  ./nginx_includes/%SITE_NAME%


# the string %SITE_NAME% is replaced with the name of the site, and the 
# resulting path is appended with '_error_log' and '_access_log' to create the 
# error log and access log paths respectively. Directories should already exist.
nginx_log_path_prefix = /var/log/nginx/%SITE_NAME%



# Certbot
#########

# Skip all certbot config. This has no 'disable' value, so must just be
# commented-out for certbot to be configured.
#nginx_skip = 1

# Path to thee certbot executable
certbot_binary = /usr/local/bin/certbot

# One config file per site is written to here; this is where we create config,
# and need not be anything certbot is already aware of
certbot_config_dir = /etc/letsencrypt/configs/

# Overwrite any existing certbot config. Comment-out to disable, there is no 
# 'disable' option here. Can be set on the command-line with --clobber-certbot
# (or --clobber-both)
# Leaving this unset means new config will always be written, and 
# previously-considered sites can be safely processed, without undoing any 
# customisation.
#certbot_clobber = on

# Cert renewal reminders go here:
certbot_email = letsencrypt@my-company.net

# This directory needs to be accessible at $domain/.well-known for the acme 
# client to work.
certbot_webroot_path = /var/www/letsencrypt/

# You probably don't need to go near these, and if you do then you should be 
# able to figure out what they do :)
certbot_key_size = 2048
certbot_server_url = https://acme-v01.api.letsencrypt.org/directory

