#! /usr/bin/perl

use strict;
use Getopt::Long;
use Data::Dumper;

my $debug = $ENV{'DEBUG'};

my $help = undef;
my $norun = undef;
my $nowrite = undef;
my $clobber = 1;
my $noclobber = undef;
my $dump_sites = undef;
my $dump_config = undef;
my $single_site = undef;

my $config_file = './lengx.conf';

my $config = {};

$config->{verbosity} = 1;

$config->{certs_dir} = '/etc/ssl/certs/';
$config->{sites_list} = './sites.conf';

$config->{defaults}->{auto_www} = 1;
$config->{defaults}->{backend} = '127.0.0.1:8080';
$config->{defaults}->{nginx_ssl} = 1;
$config->{defaults}->{nginx_clear} = 1;
$config->{defaults}->{cleartext_wildcard} = 0;


$config->{nginx_ssl_socket} = '443';
$config->{nginx_config_dir} = '/etc/nginx/sites-available';
$config->{nginx_enable_site} = 'nginx_ensite';
$config->{nginx_log_path_prefix} = '/var/log/nginx/%SITE_NAME%';
$config->{nginx_cleartext_socket} = '80';
$config->{nginx_config_check} = 'nginx -t';
$config->{nginx_restart_command} = '/etc/init.d/nginx restart';

$config->{certbot_email} = 'letsencrypt@my-company.net';
$config->{certbot_binary} = '/opt/letsencrypt/letsencrypt-auto',
$config->{certbot_key_size} = 2048;
$config->{certbot_server_url} = 'https://acme-v01.api.letsencrypt.org/directory';
$config->{certbot_config_dir} = '/etc/letsencrypt/configs/';
$config->{certbot_webroot_path} = '/var/www/letsencrypt/';
$config->{certbot_overwrite_certs} = undef;

if(-f $ARGV[0]){
	$config_file = shift(@ARGV);
}

if($config_file eq '' or ! -f $config_file){
	print STDERR "Config file ($config_file) unset or not-existent\n";
	$help =1;
}else{
	print "Parsing config file '$config_file'\n" if $debug;
	$config = parse_config($config_file, $config);
}

GetOptions(
	'no-write-nginx' => \$config->{nginx_nowrite},
	'no-write-certbot' => \$config->{certbot_nowrite},
	'no-write' => \$nowrite,

	'no-run-nginx' => \$config->{nginx_norun},
	'no-run-certbot' => \$config->{certbot_norun},
	'no-run' => \$norun,

	'clobber-nginx' => \$config->{nginx_clobber},
	'clobber-certbot' => \$config->{certbot_clobber},
	'clobber-both' => \$clobber,

	'noclobber-nginx' => \$config->{nginx_noclobber},
	'noclobber-certbot' => \$config->{certbot_noclobber},
	'noclobber-both' => \$noclobber,

	'overwrite-certs' => \$config->{certbot_overwrite_certs},

	'skip-nginx' => \$config->{nginx_skip},
	'skip-certbot' => \$config->{certbot_skip},

	'dump-nginx' => \$config->{nginx_dump},
	'dump-certbot' => \$config->{certbot_dump},

	'sites=s' => \$config->{sites_list},
	'site=s' => \$single_site,

	'dump-config' => \$config->{dump_config},
	'dump-sites' => \$dump_sites,
	'verbosity' => \$config->{verbosity},

	'help|h' => \$help,
) or die ('Failed to parse arguments');



$config->{nginx_norun} = $config->{certbot_norun} = 1 if $norun;
$config->{nginx_nowrite} = $config->{certbot_nowrite} = 1 if $nowrite;
$config->{nginx_clobber} = $config->{certbot_clobber} = 1 if $clobber;

$config->{nginx_clobber} = undef if $noclobber;
$config->{certbot_clobber} = undef if $noclobber;
$config->{nginx_clobber} = undef if $config->{nginx_noclobber};
$config->{certbot_clobber} = undef if $config->{nginx_noclobber};

$config->{certbot_config_dir}.='/';
$config->{certbot_config_dir} =~ s#//#/#g;

$config->{nginx_config_dir}.='/';
$config->{nginx_config_dir} =~ s#//#/#g;

$config->{verbosity} = 10 if $debug;

if($help){
	usage();
}

if($config->{dump_config}){
	print dump_config($config);
	exit;
}

if(!$config->{sites_list}){
	print STDERR 'Error: no domains list specified. Try with --help\n';
	exit 1;
}

if($debug){
	print STDERR "Debug on; dumping config\n";
	print STDERR dump_config($config);
}

my %sites = get_sites($config);
if($dump_sites){
	print dump_sites(\%sites);
	exit;
}

if($single_site){
	if(my $site = $sites{$single_site}){
		%sites = ();
		$sites{$single_site} = $site;
	}else{
		print STDERR "Site '$single_site' not found. Aborting";
		exit 254;
	}
}

if(!$config->{certbot_skip}){
	unless(-d $config->{certbot_config_dir}){
		print "Certbot config dir '$config->{certbot_config_dir}' does not exist; creating it\n";
		mkdir($config->{certbot_config_dir}) or die ("mkdir failed: $!");
	}
}

my $certbot_failures = 0;

foreach my $sitename (sort(keys(%sites))){

	my $site = $sites{$sitename};
	print "Processing $sitename\n";
	print "  server names: ".join(" " , @{$site->{domains_list}})."\n" if $debug;

	if($config->{certbot_skip} || $site->{certbot_skip}){
		print STDERR "  Skipping certbot\n" if $debug
	}else{
		print STDERR "  Doing certbot\n" if $debug;
		unless(create_certbot_config($site,$config)){
			$certbot_failures++;
			print " Failed. Certbot failures: $certbot_failures\n" if $debug;
		}
	}

	if($config->{nginx_skip}){
		print STDERR "  Skipping nginx \n" if $debug;
	}else{
		print STDERR "  Doing nginx\n" if $debug;
		create_nginx_config($site, $config);
	}
}

if($certbot_failures > 0){
	print "\nFailed to get all certificates. Not restarting Nginx.\n";
	print "Review the output above for clues, perhaps re-run with env var DEBUG=0 set\n";
	exit 2;
}else{
	print "Checking nginx config with '".$config->{nginx_config_check}."'\n" if $debug;
	my @output = system("$config->{nginx_config_check} 2>/dev/null >/dev/null");
	my $retval = $?>>8;
	print "Config check exited '$retval'\n" if $debug;
	
	if($retval == 0){
		print "Nginx config OK, restarting nginx with '".$config->{nginx_restart_command}."'\n";
		`$config->{nginx_restart_command}`;
		my $retval = $?>>8;
		if($retval == 0){
			exit 0;
		}else{
			print "\nNginx restart failed. Please investigate\n";
			exit 4;
		}
	}else{
		print STDERR "Nginx config check failed; Not restarting Nginx\n";
	}
}




sub create_certbot_config{
	my ($site,$config) = @_;
	my $names = join(',', @{$site->{domains_list}});
	my $site_name = $site->{sitename};
	

	my $config_file = $config->{certbot_config_dir}.$site_name;
	print STDERR "    config file: '$config_file'\n" if $debug;

	my $key_path = $config->{certs_dir}.$site_name."/privkey.pem";
	if(-f $key_path and !$config->{certbot_overwrite_certs}){
		print "    Cert already exists; skipping certbot\n" if $debug;
		return 1;
	}
	my $generate_cert_cmd = "$config->{certbot_binary} certonly --config ".$config_file;
	my $now = localtime(time())."";

my $letsencrypt = <<"EOF";
# Written by lengx (Let's Encrypt Nginx) $now
# https://github.com/BigRedS/lets-encrypt-nginx

# # # # # # # # # # # # # # # # #
#   DO NOT HAND-EDIT THIS FILE  #
#  changes will  be overwritten #
# # # # # # # # # # # # # # # # #

domains = $names
rsa-key-size = $config->{certbot_key_size}
server = $config->{certbot_server_url}
email = $config->{certbot_email}
cert-name $site_name
text = True
authenticator = webroot
webroot-path = $config->{certbot_webroot_path}
EOF

	if($config->{certbot_dump}){
		print $letsencrypt."\n";
		return undef;
	}

	if(-f $config_file and !$config->{certbot_clobber} and !$config->{certbot_dump}){
		if ($config->{verbosity} > 0){
			print STDERR "    Not writing config file - file already exists and clobber off\n"
		}
	}elsif($config->{certbot_nowrite}){
		print STDERR "    Not writing config ('nowrite' set)\n" if $debug;
	}else{
		open(my $fh, ">", $config_file) or warn ("Failed to open certbot config file '$config_file' for writing : $!") and return undef;
		print $fh $letsencrypt;
		close($fh);
		print "    Wrote '$config_file'\n" if $debug;
	}

	print STDERR "    get cert command: $generate_cert_cmd\n" if $debug;
	if($config->{certbot_norun}){
		print STDERR "    Not getting certs - '--no-run' set.\n" if $debug;
	}else{
		system($generate_cert_cmd);
		my $retval = $?>>8;
		if($retval != 0){
			print "Failed to generate cert for '$site_name' by running `$generate_cert_cmd`. Exited $retval\n";
			return undef;
		}
	}
	return 1;
}

sub create_nginx_config{
	my ($site,$config) = @_;

	my $site_name = $site->{sitename};
	my $server_names = join(" ", @{$site->{domains_list}});
	$server_names.=join(" ", ' ',  @{$site->{cleartext_domains_list}}) if $site->{cleartext_wildcard} > 0;
	
	my $config_file = $config->{nginx_config_dir}.$site->{sitename};
	print STDERR "    config file: $config_file\n" if $debug;
	if(-f $config_file and !$config->{nginx_clobber} and !$config->{nginx_dump}){
		if($config->{verbosity} > 0){
			print STDERR "    Not writing config file - file already exists and clobber off\n";
		}
		return 1;
	}
	if( -f $config_file ){
		my $lengx_comments = parse_nginx_config($config_file);
		if (defined($lengx_comments->{skip})){
			print STDERR "    Not modifying '$config_file'; '#LENGX: SKIP' set (to '". $lengx_comments->{skip}. "')\n";
			return 1;
		}
	}


	if($site->{nginx_include_file}){
		my $nginx_include = $site->{nginx_include_file};
		$nginx_include .= $site_name if $nginx_include =~ m#/$#;

		if( -f $nginx_include){
			my @include_lines;
			print STDERR  "    including file: '$nginx_include'\n" if $debug;
			open(my $fh_include, "<", $nginx_include) or print "Failed to to open nginx-include file '$nginx_include' : $!" ;
			@include_lines = <$fh_include>;
			close($fh_include);
			$config->{nginx_include_lines} = \@include_lines;
		}else{
			print "    " if $debug;
			print "include file '$nginx_include' doesn't exist. Ignoring\n" if $config->{verbosity} >= 2;
		}
	}

	my $enable_site_cmd = $config->{nginx_enable_site}.' '.$site_name;

	my($ssl_cert,$ssl_key);
	if($site->{cert_path}){
		$ssl_cert = $site->{cert_path};
		$ssl_key = $site->{key_path};
	}else{
		$ssl_cert = $config->{certs_dir}.$site_name.'/fullchain.pem';
		$ssl_key = $config->{certs_dir}.$site_name.'/privkey.pem';
	}

	print STDERR "    ssl_cert: $ssl_cert\n" if $debug;
	print STDERR "    ssl_key: $ssl_key\n" if $debug;

	my $log_path = $config->{nginx_log_path_prefix};
	$log_path =~ s/%SITE_NAME%/$site_name/;
	my $access_log = $log_path.'_access.log';
	my $error_log = $log_path.'_error.log';


	print STDERR "    access_log: $access_log\n" if $debug;
	print STDERR "    error_log: $error_log\n" if $debug;

	my $now = localtime(time())."";

	my $nginx_config = "# Written by lengx (Let's Encrypt Nginx) $now\n";
	$nginx_config.="# https://github.com/BigRedS/lets-encrypt-nginx\n\n";
	$nginx_config.="# # # # # # # # # # # # # # # # #\n";
	$nginx_config.="#   DO NOT HAND-EDIT THIS FILE  #\n";
	$nginx_config.="#  changes will  be overwritten #\n";
	$nginx_config.="# # # # # # # # # # # # # # # # #\n\n";

	$nginx_config.= "server {\n";
	$nginx_config.="	listen $config->{nginx_ssl_socket} ssl;\n" if $site->{nginx_ssl} > 0;
	$nginx_config.="	listen $config->{nginx_cleartext_socket};\n" if ($site->{nginx_clear} > 0);
	$nginx_config.="	server_name $server_names;\n";
	$nginx_config.="	location / {\n";
	$nginx_config.="		proxy_pass $site->{backend};\n";
	if($site->{additional_location_line}->[0]){
		print STDERR "    ".scalar(@{$site->{additional_location_line}})." additional_location_lines\n" if $debug;
		$nginx_config.="\t\t# ".scalar(@{$site->{additional_location_line}})." additional location lines\n";
		foreach my $line (@{$site->{additional_location_line}}){
			$nginx_config.="\t\t$line\n";
		}
	}

	$nginx_config.="	}\n";
	$nginx_config.="	access_log $access_log;\n";
	$nginx_config.="	error_log $error_log;\n";
	$nginx_config.="	ssl_certificate $ssl_cert;\n" if $site->{nginx_ssl} > 0;
	$nginx_config.="	ssl_certificate_key $ssl_key;\n" if $site->{nginx_ssl} > 0;



	if($config->{nginx_include_lines}->[0]){
		$nginx_config.=join("", @{$config->{nginx_include_lines}});
	}

	if($site->{additional_server_line}->[0]){
		print STDERR "    ".scalar(@{$site->{additional_server_line}})." additional_server_lines\n" if $debug;
		$nginx_config.="\t# ".scalar(@{$site->{additional_server_line}})." additional_server_lines\n";
		foreach my $line (@{$site->{additional_server_line}}){
			$nginx_config.="\t$line\n";
		}
	}
	$nginx_config.="}\n";

	if($config->{nginx_dump}){
		print $nginx_config;
		return 2;
	}
	if($config->{nginx_nowrite}){
		print STDERR "    Not writing config; '--no-write' set\n" if $debug;
	}else{
		open(my $fh, ">", $config_file) or warn ("Failed to open nginx config file '$config_file' for writing : $!") and return undef;
		print $fh $nginx_config;
		close($fh);
		print "    " if $debug; # To more neatly align the following line
		print "Wrote '$config_file'\n" if $debug;
	}

	print STDERR "    enable site command: $enable_site_cmd\n" if $debug;
	if($config->{nginx_norun}){
		print STDERR "    Not running enable_site command - '--no-run' set.\n" if $debug;
	}else{
		system($enable_site_cmd);
		if($? != 0){
			print "Failed to enable '$site_name' by running `$enable_site_cmd`. Exited $?\n";
		}else{
			print "Enabled site '$site_name'\n" if $debug;
		}
	}
	return;
}


sub get_sites{
	my $config = shift;

	my %sitss;
	open(my $fh_domains, "<", $config->{sites_list}) or print "Failed to open domains config file '$config->{sites_list}' : $!\n" and exit 255;
	print STDERR "Parsing sites file $config->{sites_list}\n" if $debug;
	my $sitename;
	while (my $line = readline($fh_domains)){
		chomp($line);
		next if $line =~ m/^\s*#/ or $line =~ m/^\s*$/;
		$line =~ s/\s+$//;

		if($line =~ m/^(\S)+/){
			if($sitename eq '_default'){
				$config->{defaults}->{auto_www} = $sites{_default}->{auto_www} if $sites{_default}->{auto_www} =~ m/.+/;
				$config->{defaults}->{backend} = $sites{_default}->{backend} if $sites{_default}->{backend} =~ m/.+/;
				$config->{defaults}->{nginx_ssl} = $sites{_default}->{nginx_ssl} if $sites{_default}->{nginx_ssl} =~ m/.+/;
				$config->{defaults}->{nginx_clear} = $sites{_default}->{nginx_clear} if $sites{_default}->{nginx_clear} =~ m/.+/;
				$config->{defaults}->{do_certs_if_script} = $sites{_default}->{do_certs_if_script} if $sites{_default}->{do_certs_if_script} =~ m/.+/;
				$config->{defaults}->{cleartext_wildcard} = $sites{_default}->{cleartext_wildcard} if $sites{_default}->{cleartext_wildcard} =~ m/.+/;
				$config->{defaults}->{nginx_include_file} = $sites{_default}->{nginx_include_file} if $sites{_default}->{nginx_include_file} =~ m/.+/;

				$config->{defaults}->{nginx_ssl} = undef if $config->{defaults}->{do_certs_if_script};

				push(@{$config->{defaults}->{additional_server_line}}, @{$sites{_default}->{additional_server_line}}) if $sites{_default}->{additional_server_line}->[0];
				push(@{$config->{defaults}->{additional_location_line}}, @{$sites{_default}->{additional_location_line}}) if $sites{_default}->{additional_location_line}->[0];

				delete($sites{_default});
			}

			my @domains = split(m/\s+/, $line);
			$sitename = $domains[0];
			$sites{$sitename}->{domains_list} = \@domains;
			$sites{$sitename}->{sitename} = $sitename;

			$sites{$sitename}->{do_certs_if_script} = $config->{defaults}->{do_certs_if_script} unless $sites{$sitename}->{nginx_ssl} =~ m/\d/;
			$sites{$sitename}->{auto_www} = $config->{defaults}->{auto_www};
			$sites{$sitename}->{backend} = $config->{defaults}->{backend};
			$sites{$sitename}->{nginx_ssl} = $config->{defaults}->{nginx_ssl} unless $sites{$sitename}->{do_certs_if_script};
			$sites{$sitename}->{nginx_clear} = $config->{defaults}->{nginx_clear};
			$sites{$sitename}->{cleartext_wildcard} = $config->{defaults}->{cleartext_wildcard};
			$sites{$sitename}->{nginx_include_file} = $config->{defaults}->{nginx_include_file};

			$sites{$sitename}->{additional_server_line} = $config->{defaults}->{additional_server_line};
			$sites{$sitename}->{additional_location_line} = $config->{defaults}->{additional_location_line};

		}
		elsif($line =~ m/^\s+(\S+)\s+(.+)$/){
			my ($key,$value) = ($1,$2);
			$sites{$sitename}->{backend} = $value if $key eq 'backend';
			$sites{$sitename}->{do_certs_if_script} = $value if $key eq 'do_certs_if_script';
			$sites{$sitename}->{nginx_include_file} = $value if $key eq 'nginx_include_file';
			$sites{$sitename}->{cert_path} = $value if $key eq 'cert_path';
			$sites{$sitename}->{key_path} = $value if $key eq 'key_path';
			push(@{$sites{$sitename}->{additional_server_line}}, $value) if $key eq 'nginx_add_server_line';
			push(@{$sites{$sitename}->{additional_location_line}}, $value) if $key eq 'nginx_add_location_line';
			if($key =~ m/^(auto_www|nginx_ssl|nginx_clear|cleartext_wildcard)$/){
				if($value =~ m/^(y|1)/i or $value =~ m/^on/i){
					$sites{$sitename}->{$key} = '1';
				}elsif($value =~ m/^n|0/i or $value =~ m/^off/i){
					$sites{$sitename}->{$key} = '0';
				}else{
					print STDERR "Failed attempt to set '$key' to '$value'";
				}
			}
			if($key eq 'nginx_ssl'){
				delete($sites{$sitename}->{do_certs_if_script});
			}
		}
	}
	foreach my $sitename (sort(keys(%sites))){
		if($sites{$sitename}->{cleartext_wildcard} > 0){
			my @cleartext_names;
			foreach my $name(@{$sites{$sitename}->{domains_list}}){
				push(@cleartext_names, '*.'.$name);
			}
			$sites{$sitename}->{cleartext_domains_list} = \@cleartext_names;
		}
		if($sites{$sitename}->{auto_www} > 0){
			my @names = @{$sites{$sitename}->{domains_list}};
			my @new_names;
			foreach my $name (@names){
				push(@new_names, $name);
				push(@new_names, "www.".$name);
			}
			$sites{$sitename}->{domains_list} = \@new_names;
		}
		if($sites{$sitename}->{cert_path} =~ m/.+/){
			print STDERR "  cert_path and key_path set; setting certbot_skip to 1\n";
			$sites{$sitename}->{certbot_skip} = 1;
			$sites{$sitename}->{nginx_ssl} = 1;
		}
	}
	foreach my $sitename (sort(keys(%sites))){
		if($sites{$sitename}->{do_certs_if_script} =~ m/.+/ and !$sites{$sitename}->{nginx_ssl} and $sites{$sitename}->{certbot_skip} < 1){
			my $check_cmd = $sites{$sitename}->{do_certs_if_script};
			my $exit_status_sum = 0;
			foreach my $domain_name (@{$sites{$sitename}->{domains_list}}){
				my $cmd.=$check_cmd." ".$domain_name;
				system($cmd);
				$exit_status_sum+=$?;
				if($? < 0){
					print STDERR "Unusually low exit status ($?) from do_certs_if_script `$cmd`\n";
				}
			}
			if($exit_status_sum == 0){
				print STDERR "  do_certs_if_script: Enabling SSL for $sitename\n" if $debug;
				$sites{$sitename}->{nginx_ssl} = 1;
				$sites{$sitename}->{certbot_skip} = 0;
			}else{
				print STDERR "  do_certs_if_script: Disabling SSL for $sitename\n" if $debug;
				$sites{$sitename}->{nginx_ssl} = 0;
				$sites{$sitename}->{certbot_skip} = 1;
			}
		}
	}
	print STDERR "Processed ".keys(%sites)." sites\n\n" if $debug;
	return %sites;
}



sub parse_config {
	my $file = shift;
	my $config = shift;
	my @keys = qw/nginx_ssl_socket nginx_cleartext_socket nginx_log_path_prefix nginx_config_dir
	              nginx_clobber nginx_enable_site nginx_skip
	              certbot_config_dir certbot_key_size certbot_server_url certbot_email certbot_webroot_path 
		      certbot_binary certbot_clobber certbot_skip
	              certs_dir sites_list
	/;
	open (my $fh_config, "<", $file) or die ("Failed to open config file '$file' for reading : $!");
	while (my $line = readline($fh_config)){
		next if $line =~ m/^\s*#/;
		if($line =~ m/^(\S+)\s*=\s*(\S+)\s*$/){
			my($key,$value) = ($1,$2);
			unless(grep{ /^$key$/ } @keys){
				print STDERR ("Unrecognised config option '$key' (set to '$value'); ignoring\n");
			}
			$value =~ s/("|')//g;
			$config->{$key} = $value if $value =~ m/\S+/;
		}
	}
	return($config);
}

sub dump_config{
	my $config = shift;
	delete($config->{defaults});
	delete($config->{dump_config});
	my $string=hash_to_config($config);
	return $string;
}

sub dump_sites{
	my $sites = shift;
	my $string;
	foreach my $sitename (sort(keys(%{$sites}))){
		$string.="$sitename\n";
		foreach my $key (sort(keys(%{$sites{$sitename}}))){
			if(    ($key =~ m/domains_list$/ or $key =~ m/^additional_(location|server)_line$/)
			   and ($sites->{$sitename}->{$key}) ){
				$string.="  $key ".join("; ", @{$sites->{$sitename}->{$key}})."\n";
			}else{
				$string.="  $key $sites->{$sitename}->{$key}\n";
			}
		}
		$string.="\n";
	}
	return $string;
}

sub hash_to_config{
	my $string;
	my $hash = shift;
	foreach my $key (sort(keys(%{$hash}))){
		my $value = $hash->{$key};
		if(ref($value) eq 'ARRAY'){
			$value = join(", ", @{$value});
		}
		next unless $value =~ m/\S+/;
		$key =~ s/\_/\-/g;
		$string.="$key=$value\n";
	}
	$string.="\n";
	return $string;
}

sub parse_nginx_config{
	my $path = shift;
	return unless -f $path;

	my %config;
	open(my $fh, "<", $path) or warn "Failed to open '$path' for reading :$!" and return;
	while (my $line = readline($fh)){
		if($line =~ m/^#\s*LENGX\s*:\s*(.+)$/){
			my $option = lc($1);
			if($option =~ m/(\w+):(.+)$/){
				$config{$1} = $2;
			}else{
				$config{$option} = '';
			}
		}
	}
	return \%config;
}


sub usage{
print <<"EOF";

lengx (Let's Encrypt Nginx); script for configuring nginx and lets encrypt.

USAGE:

  lengx [ <config-file> ] [--sites <sites-list>] [options]

  config-file defaults to $config_file; must be first argument when set
  sites-list defaults to $config->{sites_list}

See CONFIG and SITES below for a description of those two files. 

Options:

  --site <sitename>

    Only process site named 'sitename'

  --no-write-nginx, --no-write-certbot, --no-write

    Don't write nginx config, certbot config, or either. Assembles the config, 
    but skips the bit where it would be writen.

  --no-run-nginx, --no-run-certbot, --no-run
  
    Don't run the nginx site-enabling command,  don't run the certbot cert-
    issuing command, or don't run either. 

  --noclobber-nginx, --noclobber-certbot, --noclobber-both

    Disable overwriting of existing nginx configs, certbot configs, or both. Will 
    print a warning instead.

  --overwrite-certs

    (attempt to) get certs issued even if they already exist. Will probably involve
    using certbot's interactive interface. 

  --skip-nginx --skip-certbot

    Skip all nginx configuring, or skip all certbot configuration. Calling with
    both is permitted, but pointless.


  --dump-nginx, --dump-certbot

    Dump nginx config to stdout, or dump certbot config to stdout (rather than
    writing to files). Not affected by --no-write*

  --dump-config, --dump-sites

    Dump the configuration, or site definitions, to stdout and exit. Config is 
    dumped in the format of a valid config file, but sites are not.
    
CONFIG

The config file is a series of key=value pairs, and the keys exactly match those
used in the \%config hash internally. Check the top of the script for currently-
known ones, and use --dump-config to produce the file. 

Unsupported config keys cause a warning to be displayed, but don't prevent execution.
Lines beginning '#' are skipped as comments.

See ./lengx.conf.example for all available config options.

SITES

Each site is defined, at minimum, by a single space-separated line of domain names. 
The first item in this list is taken as the name of the site, and  options may be 
set on successive lines that begin with spaces.

See ./sites.conf.example for an example.

DEBUGGING

Set the environment variable 'DEBUG' to anything to have helpful(!) messages printed to stderr:

    DEBUG=1 lengx --no-run --no-write 

is a likely invocation here.

There are two canonical repositories for this, each with equal status:

  https://git.avi.co/avi/lets-encrypt-nginx
  https://bitbucket.org/BigRedS/lets-encrypt-nginx

EOF
exit 0;
}
